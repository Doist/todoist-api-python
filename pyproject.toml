[tool.poetry]
name = "todoist_api_python"
version = "2.1.5"
description = "Official Python SDK for the Todoist REST API."
readme = "README.md"
homepage = "https://github.com/Doist/todoist-api-python"
repository = "https://github.com/Doist/todoist-api-python"
documentation = "https://developer.todoist.com/rest/"
authors = ["Doist Developers <dev@doist.com>"]
keywords = ["todoist", "rest", "api", "python"]
license = "MIT"
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
include = [
    "LICENSE",
]

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.26.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.1.1"
pre-commit = "^2.17.0"
mypy = "^0.990"
responses = "^0.22.0"
pytest-asyncio = "^0.21.0"
types-requests = "^2.31.0.2"
ruff = "^0.2.2"

[tool.isort]
profile = "black"

[build-system]
requires = ["poetry-core>=1.0.8"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
select = [
  "ASYNC",      # flake8-async
  "C4",         # flake8-comprehensions
  "D",          # pydocstyle,
  "E", "W",     # pycodestyle
  "F",          # pyflakes
  "I",          # isort
  "PL",         # pylint
  "RUF",        # ruff
  "S",          # flake8-bandit
  "SIM",        # flake8-simplify
  "UP",         # pyupgrade
]

# By default, always show source code snippets.
show-source = true

ignore = [
  ## D - pydocstyle ##
  # D1XX errors are OK. Don't force people into over-documenting.
  "D100", "D101", "D102", "D103", "D104", "D105", "D107",
  # These need to be fixed.
  "D202", "D205", "D400", "D401",

  ## E / W - pycodestyle ##
  "E501",  # line too long
  "E203",  # whitespace-before-punctuation
  "E741",  # ambiguous variable name

  ## PL - pylint ##
  # Commented-out rules are rules that we disable in pylint but are not supported by ruff yet.

  # Import order issues
  # "PLC0411",  # wrong-import-order
  # "PLC0412",  # wrong-import-position
  "PLC0414",  # ungrouped-imports

  # Documentation issues
  # "C0114",  # missing-module-docstring

  # Complexity issues
  # "PLR0904",  # too-many-public-methods
  # "PLC0302",  # too-many-lines
  # "PLR1702",  # too-many-nested-blocks
  # "PLR0902",  # too-many-instance-attributes
  "PLR0911",  # too-many-return-statements
  "PLR0915",  # too-many-statements
  "PLR0912",  # too-many-branches
  # "PLR0903",  # too-few-public-methods
  # "PLR0914",  # too-many-locals
  # "PLC0301",  # line-too-long
  "PLR0913",  # too-many-arguments
  "PLR2004",  # magic-value-comparison
  "PLR5501",  # collapsible-else-if
  "PLW0603",  # global-statement
  "PLW2901",  # redefined-loop-name
  "PLC1901",  # compare-to-empty-string

  ## RUF - ruff ##
  "RUF001",  # ambiguous-unicode-character-string
  "RUF002",  # ambiguous-unicode-character-docstring
  "RUF003",  # ambiguous-unicode-character-comment
  "RUF012",  # mutable-class-default

  # Enable when Poetry supports PEP 621 and we migrate our confguration to it.
  # See: https://github.com/python-poetry/poetry-core/pull/567
  "RUF200",

  "S101",  # assert
  "S104",  # hardcoded-bind-all-interfaces
  "S105",  # hardcoded-password-string
  "S106",  # hardcoded-password-func-arg
  "S107",  # hardcoded-password-default
  "S110",  # try-except-pass
  "S301",  # suspicious-pickle-usage
  "S303",  # suspicious-insecure-hash-usage
  "S310",  # suspicious-url-open-usage
  "S311",  # suspicious-non-cryptographic-random-usage
  "S324",  # hashlib-insecure-hash-function
  "S603",  # subprocess-without-shell-equals-true
  "S607",  # start-process-with-partial-path
  "S608",  # hardcoded-sql-expression

  ## SIM - flake8-simplify ##
  "SIM102",  # collapsible-if
  "SIM105",  # suppressible-exception
  "SIM108",  # if-else-block-instead-of-if-exp
  "SIM114",  # if-with-same-arms
  "SIM116",  # if-else-block-instead-of-dict-lookup
  "SIM117",  # multiple-with-statements

  # Enable when the rule is out of preview and false-positives are handled.
  # See: https://docs.astral.sh/ruff/rules/in-dict-keys/
  "SIM118",  # in-dict-keys
]

extend-exclude = [
  "env",
  "runtime",
]

[tool.ruff.per-file-ignores]
# These files have only a bunch of imports in them to force code loading.
"tests/**" = ["S101"] # Allow assert statement in tests.

# To import all fixtures from other conftests.
"conftest.py" = ["F401", "F403"]
# To import select fixtures from non-local conftests.
# Importing and using the fixture makes it be shadowed.
"test_*.py" = ["F401", "F811"]

[tool.ruff.isort]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "parts",
  "first-party",
  "td-models",
  "td-apps",
  "local-folder",
]

[tool.ruff.pydocstyle]
convention = "pep257"

[tool.ruff.lint.pyupgrade]
# Required by tools like Pydantic that use type information at runtime.
# https://github.com/asottile/pyupgrade/issues/622#issuecomment-1088766572
keep-runtime-typing = true
